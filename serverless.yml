service: realz

frameworkVersion: "3"
useDotenv: true

package:
  patterns:
    - "!node_modules/**"
  excludeDevDependencies: false
  individually: true

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-2
  deploymentPrefix: ${file(./env/variables.js):folderName}
  deploymentBucket:
    name: ${file(./env/variables.js):bucketName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action: "dynamodb:*"
          Resource: "arn:aws:dynamodb:*"
  websocketsApiName: realz
  websocketsApiRouteSelectionExpression: $request.body.action
  websocketsDescription: Websocket that handling user activities
  httpApi:
    cors:
      allowedOrigins: "*"
      allowedHeaders: "*"
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    chatRoomsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-chatrooms
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
functions:
  onConnect:
    name: ${self:service}-${sls:stage}-ws-onConnect
    description: "A websocket that handle connection when user connect to a chat room"
    handler: src/functions/onConnect.handler
    events:
      - websocket:
          route: $connect
  joinChatRoom:
    name: ${self:service}-${sls:stage}-ws-joinChatRoom
    handler: src/functions/ws-joinChatRoom.handler
    description: "A websocket that handle connection when user connect to a chat room"
    environment:
      AWS_WEBSOCKET_URL: ${file(./env/variables.js):websocketUrl}
    events:
      - websocket:
          route: joinChatRoom
  leaveChatRoom:
    name: ${self:service}-${sls:stage}-ws-leaveChatRoom
    handler: src/functions/ws-leaveChatRoom.handler
    description: "A websocket that handle connection when user disconnect to a chat room"
    environment:
      AWS_WEBSOCKET_URL: ${file(./env/variables.js):websocketUrl}
    events:
      - websocket:
          route: leaveChatRoom
  sendMessage:
    name: ${self:service}-${sls:stage}-ws-sendMessage
    handler: src/functions/ws-sendMessage.handler
    description: "A websocket that handle send of message into a chat room"
    environment:
      AWS_WEBSOCKET_URL: ${file(./env/variables.js):websocketUrl}
    events:
      - websocket:
          route: sendMessage
  createUser:
    name: ${self:service}-${sls:stage}-createUser
    handler: src/functions/api-createUser.handler
    description: Lambda function for creating user
    events:
      - httpApi:
          method: POST
          path: /users
    tags:
      project: ${self:service}
  findUserById:
    name: ${self:service}-${sls:stage}-findUserById
    handler: src/functions/api-findUserById.handler
    description: Lambda function for finding user by id
    events:
      - httpApi:
          method: GET
          path: /users/{id}
  createChatRoom:
    name: ${self:service}-${sls:stage}-createChatRoom
    handler: src/functions/api-createChatRoom.handler
    description: Lambda function for creating chat room
    events:
      - httpApi:
          method: POST
          path: /chat-rooms
    tags:
      project: ${self:service}
  getAllChatRooms:
    name: ${self:service}-${sls:stage}-getAllChatRooms
    handler: src/functions/api-getAllChatRooms.handler
    description: Lambda function for get all chat rooms
    events:
      - httpApi:
          method: GET
          path: /chat-rooms
    tags:
      project: ${self:service}

plugins:
  - serverless-esbuild
  - serverless-offline
